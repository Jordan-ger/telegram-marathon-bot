const { Telegraf, Scenes, session, Markup } = require('telegraf');
const fs = require('fs');

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const BOT_TOKEN = '7088809054:AAEz2xMrDsnmIpms7JFqy_uSZ0jHZd-zgUo';
const ADMIN_ID = 1704458173;
const DATA_FILE = 'participants.json';
const LOCK_FILE = 'lock.json'; // –§–∞–π–ª –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

const bot = new Telegraf(BOT_TOKEN);
let awaitingFinals = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
let participants = {};
let isLocked = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
if (fs.existsSync(DATA_FILE)) {
  participants = JSON.parse(fs.readFileSync(DATA_FILE));
}

if (fs.existsSync(LOCK_FILE)) {
  isLocked = JSON.parse(fs.readFileSync(LOCK_FILE)).isLocked;
}

function saveParticipants() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(participants, null, 2));
}

function saveLockState() {
  fs.writeFileSync(LOCK_FILE, JSON.stringify({ isLocked }, null, 2));
}

// FSM —Å—Ü–µ–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const formWizard = new Scenes.WizardScene(
  'form-wizard',

  async (ctx) => {
    const id = String(ctx.from.id);
    if (participants[id]) {
      await ctx.reply('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ!');
      return ctx.scene.leave();
    }

    if (isLocked) {
      await ctx.reply('‚ùå –ó–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã.');
      return ctx.scene.leave();
    }

    ctx.wizard.state.data = {};
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –æ—Ç üçæVodka.bet:');
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.message.text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      return ctx.scene.leave();
    }
    if (ctx.message.text === 'üîÅ –†–µ—Å—Ç–∞—Ä—Ç') {
      return ctx.wizard.selectStep(0);
    }
    ctx.wizard.state.data.vodkaID = ctx.message.text;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ù–∏–∫–Ω–µ–π–º –Ω–∞ Kick:');
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.message.text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –æ—Ç üçæVodka.bet:');
        return ctx.wizard.selectStep(1);
      }
      if (ctx.message.text === 'üîÅ –†–µ—Å—Ç–∞—Ä—Ç') {
        await ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.');
        return ctx.wizard.selectStep(0);
      }
    ctx.wizard.state.data.kickNick = ctx.message.text;
    await ctx.reply('ü§î–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π X –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –º–∞—Ä–∞—Ñ–æ–Ω–∞:');
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.message.text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –æ—Ç üçæVodka.bet:');
        return ctx.wizard.selectStep(1);
      }
      if (ctx.message.text === 'üîÅ –†–µ—Å—Ç–∞—Ä—Ç') {
        await ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.');
        return ctx.wizard.selectStep(0);
      }
    ctx.wizard.state.data.maxX = ctx.message.text;
    await ctx.reply('üßê–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π –±—É–¥–µ—Ç –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –º–∞—Ä–∞—Ñ–æ–Ω–∞:');
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.message.text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        await ctx.reply('ü§î–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π X –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –º–∞—Ä–∞—Ñ–æ–Ω–∞:');
        return ctx.wizard.selectStep(3);
      }
      if (ctx.message.text === 'üîÅ –†–µ—Å—Ç–∞—Ä—Ç') {
        await ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.');
        return ctx.wizard.selectStep(0);
      }
    ctx.wizard.state.data.finalBalance = ctx.message.text;

    const id = String(ctx.from.id);
    participants[id] = {
      telegramName: `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim(),
      telegramID: id,
      ...ctx.wizard.state.data,
    };
    saveParticipants();
    
    await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É ‚úÖ');
    return ctx.scene.leave();
  }
);

bot.action('restart_form', async (ctx) => {
    await ctx.answerCbQuery(); // –∑–∞–∫—Ä—ã—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞..."
    await ctx.scene.enter('form-wizard');
});

const stage = new Scenes.Stage([formWizard]);
bot.use(session());
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ.`,
    Markup.keyboard([['üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ']]).resize()
  );
});

// –ö–Ω–æ–ø–∫–∞ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
bot.hears('üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ', (ctx) => ctx.scene.enter('form-wizard'));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞
bot.command('reset', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö.');
  }

  participants = {};
  saveParticipants();

  await ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã. –í—Å–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.');
  if (ctx.message.text === 'üîÅ –†–µ—Å—Ç–∞—Ä—Ç') {
    await ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.');
    return ctx.wizard.selectStep(0);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
bot.command('lock', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö.');
  }

  isLocked = true;
  saveLockState();
  await ctx.reply('‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã.');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
bot.command('unlock', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö.');
  }

  isLocked = false;
  saveLockState();
  await ctx.reply('‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã.');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
bot.command('cal', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
  }
  awaitingFinals[ctx.from.id] = { step: 'awaiting_maxX' };
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π X');
});

bot.on('text', async (ctx) => {
  const state = awaitingFinals[ctx.from.id];
  if (!state) return;

  if (state.step === 'awaiting_maxX') {
    const maxX = parseFloat(ctx.message.text.replace(',', '.'));
    if (isNaN(maxX)) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–∫—Å–∞.');
    state.finalX = maxX;
    state.step = 'awaiting_balance';
    return ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:');
  }

  if (state.step === 'awaiting_balance') {
    const finalBalance = parseFloat(ctx.message.text.replace(',', '.'));
    if (isNaN(finalBalance)) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ö–æ–Ω–µ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.');

    const finalX = state.finalX;
    delete awaitingFinals[ctx.from.id]; // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    const entries = Object.values(participants).map(p => ({
      ...p,
      maxXNum: parseFloat(String(p.maxX).replace(',', '.')) || 0,
      balanceNum: parseFloat(String(p.finalBalance).replace(',', '.')) || 0,
    }));

    if (entries.length === 0) {
      return ctx.reply('‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.');
    }

    const closestX = entries.reduce((prev, curr) =>
      Math.abs(curr.maxXNum - finalX) < Math.abs(prev.maxXNum - finalX) ? curr : prev
    );

    const closestBalance = entries.reduce((prev, curr) =>
      Math.abs(curr.balanceNum - finalBalance) < Math.abs(prev.balanceNum - finalBalance) ? curr : prev
    );
// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
try {
  await bot.telegram.sendMessage(closestX.telegramID, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É X —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: ${closestX.maxX}`);
} catch (e) {
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é X (${closestX.telegramID}):`, e);
}

try {
  await bot.telegram.sendMessage(closestBalance.telegramID, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –ø–æ –∫–æ–Ω–µ—á–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: ${closestBalance.finalBalance}`);
} catch (e) {
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é Balance (${closestBalance.telegramID}):`, e);
}

// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const participantList = entries.map((p, i) =>
  `${i + 1}. ${p.telegramName} | VodkaID: ${p.vodkaID} | Kick: ${p.kickNick} | Max X: ${p.maxX} | Final Balance: ${p.finalBalance}`
).join('\n');

// –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
for (const p of entries) {
  try {
    await bot.telegram.sendMessage(p.telegramID, `üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ä–∞—Ñ–æ–Ω–∞:\n\n${participantList}`);
  } catch (e) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É (${p.telegramID}):`, e);
  }
}

    return ctx.reply(
      `üìä –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω\n\n` +
      `üéØ –ò—Ç–æ–≥–æ–≤—ã–π Max X: ${finalX}\n` +
      `üí∞ –ò—Ç–æ–≥–æ–≤—ã–π Final Balance: ${finalBalance}\n\n` +
      `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ Max X:\nüë§ ${closestX.telegramName} ‚Äî ${closestX.maxX}\n\n` +
      `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ Final Balance:\nüë§ ${closestBalance.telegramName} ‚Äî ${closestBalance.finalBalance}`
    );
  }
})

;

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
